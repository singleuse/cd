1. Write a LEX Program to scan reserved word & Identifiers of C Language

%{
int n=0;
%}
%%
"if"|"else"|"while"|"for" { printf("\t keyword %s",yytext); }
[a-zA-Z_][a-zA-Z_]* { printf("\t identifier %s",yytext); }
"<"|"<="|">"|">="|"=="|"="|"+"|"-"|"*" { printf("\t operator %s",yytext);}
[(){},;] { printf("\t separator %s",yytext);}
[0-9]+ { printf("\t digits %s",yytext);}
%%
int main()
{
yylex();
}
int yywrap()
return 1;
}

Program Compilation and Execution
lex tok.l
gcc lex.yy.c
./a.out
c=a+b;
identifier c operator = identifier a operator + identifier b separator ; 
^Z


2. Implement Predictive Parsing algorithm using C program .
#include<stdio.h>
#include<conio.h>
#include<string.h>
char prol[7][10]={"S","A","A","B","B","C","C"};
char pror[7][10]={"A","Bb","Cd","aB","@","Cc","@"};
char prod[7][10]={"S->A","A->Bb","A->Cd","B->aB","B->@","C->Cc","C->@"}; 
char first[7][10]={"abcd","ab","cd","a@","@","c@","@"};
char follow[7][10]={"$","$","$","a$","b$","c$","d$"};
char table[5][6][10];
numr(char c)
{
switch(c)
{
case 'S': return 0;
case 'A': return 1;
case 'B': return 2;
case 'C': return 3;
case 'a': return 0;
case 'b': return 1;
case 'c': return 2;
case 'd': return 3;
case '$': return 4;
}
return(2);
}
void main()
{
int i,j,k;
clrscr();
for(i=0;i<5;i++)
for(j=0;j<6;j++)
strcpy(table[i][j]," ");
printf("\nThe following is the predictive parsing table for the following grammar:\n");
for(i=0;i<7;i++)
printf("%s\n",prod[i]);
printf("\nPredictive parsing table is\n");
fflush(stdin);
for(i=0;i<7;i++)
{
k=strlen(first[i]);//first[1]=ab
for(j=0;j<k;j++)
if(first[i][j]!='@')//first[1][0]=b b!=@
strcpy(table[numr(prol[i][0])+1][numr(first[i][j])+1],prod[i]);//table[2][1],prod[1]
}
for(i=0;i<7;i++)
{
if(strlen(pror[i])==1)
{
if(pror[i][0]=='@')
{
k=strlen(follow[i]);
for(j=0;j<k;j++)
strcpy(table[numr(prol[i][0])+1][numr(follow[i][j])+1],prod[i]);
}
}
}
strcpy(table[0][0]," ");
strcpy(table[0][1],"a");
strcpy(table[0][2],"b");
strcpy(table[0][3],"c");
strcpy(table[0][4],"d");
strcpy(table[0][5],"$");
strcpy(table[1][0],"S");
strcpy(table[2][0],"A");
strcpy(table[3][0],"B");
strcpy(table[4][0],"C");
printf("\n--------------------------------------------------------\n");
for(i=0;i<5;i++)
for(j=0;j<6;j++)
{
printf("%-10s",table[i][j]);
if(j==5)
printf("\n--------------------------------------------------------\n");
}
getch();
}

OUTPUT


3. Write a C program to generate three address code
#include<stdio.h>
#include<string.h>
void pm();
void plus();
void div();
int i,ch,j,l,addr=100;
char ex[10], exp[10] ,exp1[10],exp2[10],id1[5],op[5],id2[5];
void main()
{
clrscr();
while(1)
{
printf("\n1.assignment\n2.arithmetic\n3.relational\n4.Exit\nEnter the choice:");
scanf("%d",&ch);
switch(ch)
{
case 1:
printf("\nEnter the expression with assignment operator:");
scanf("%s",exp);
l=strlen(exp);
exp2[0]='\0';
i=0;
while(exp[i]!='=')
{
i++;
}
strncat(exp2,exp,i);
strrev(exp);
exp1[0]='\0';
strncat(exp1,exp,l-(i+1));
strrev(exp1);
printf("Three address code:\ntemp=%s\n%s=temp\n",exp1,exp2);
break;
case 2:
printf("\nEnter the expression with arithmetic operator:");
scanf("%s",ex);
strcpy(exp,ex);
l=strlen(exp);
exp1[0]='\0';
for(i=0;i<l;i++)
{
if(exp[i]=='+'||exp[i]=='-')
{
if(exp[i+2]=='/'||exp[i+2]=='*')
{
pm();
break;
}
else
{
plus();
break;
}
}
else if(exp[i]=='/'||exp[i]=='*')
{
div();
break;
}
}
break;
case 3:
printf("Enter the expression with relational operator");
scanf("%s%s%s",&id1,&op,&id2);
if(((strcmp(op,"<")==0)||(strcmp(op,">")==0)||(strcmp(op,"<=")==0)||(strcmp(op,">=")==0)||(strcmp
(op,"==")==0)||(strcmp(op,"!=")==0))==0)
printf("Expression is error");
else
{
printf("\n%d\tif %s%s%s goto %d",addr,id1,op,id2,addr+3);
addr++;
printf("\n%d\t T:=0",addr);
addr++;
printf("\n%d\t goto %d",addr,addr+2);
addr++;
printf("\n%d\t T:=1",addr);
}
break;
case 4:
exit(0);
}
}
}
void pm()
{
strrev(exp);
j=l-i-1;
strncat(exp1,exp,j);
strrev(exp1);
printf("Three address code:\ntemp=%s\ntemp1=%c%ctemp\n",exp1,exp[j+1],exp[j]);
}
void div()
{
strncat(exp1,exp,i+2);
printf("Three address code:\ntemp=%s\ntemp1=temp%c%c\n",exp1,exp[i+2],exp[i+3]);
}
void plus()
{
strncat(exp1,exp,i+2);
printf("Three address code:\ntemp=%s\ntemp1=temp%c%c\n",exp1,exp[i+2],exp[i+3]);
}


OUTPUT


4. Implement SLR(1) Parsing algorithm
#include<stdio.h>
#include<string.h>
int i,j,k,m,n=0,o,p,ns=0,tn=0,rr=0,ch=0;
char read[15][10],gl[15],gr[15][10],temp,templ[15],tempr[15][10],*ptr,temp2[5],dfa[15][15];
struct states
{
 char lhs[15],rhs[15][10];
 int n;
}I[15];
int compstruct(struct states s1,struct states s2)
{
 int t;
 if(s1.n!=s2.n)
 return 0;
 if( strcmp(s1.lhs,s2.lhs)!=0 )
 return 0;
 for(t=0;t<s1.n;t++)
 if( strcmp(s1.rhs[t],s2.rhs[t])!=0 )
 return 0;
 return 1;
}
void moreprod()
{
 int r,s,t,l1=0,rr1=0;
 char *ptr1,read1[15][10];
 for(r=0;r<I[ns].n;r++)
 {
 ptr1=strchr(I[ns].rhs[l1],'.');
 t=ptr1-I[ns].rhs[l1];
 if( t+1==strlen(I[ns].rhs[l1]) )
 {
 l1++;
 continue;
 }
 temp=I[ns].rhs[l1][t+1];
 l1++;
 for(s=0;s<rr1;s++)
 if( temp==read1[s][0] )
 break;
 if(s==rr1)
 {
 read1[rr1][0]=temp;
 rr1++;
 }
 else
 continue;
 for(s=0;s<n;s++)
 {
 if(gl[s]==temp)
 {
 I[ns].rhs[I[ns].n][0]='.';
 I[ns].rhs[I[ns].n][1]=NULL;
 strcat(I[ns].rhs[I[ns].n],gr[s]);
 I[ns].lhs[I[ns].n]=gl[s];
 I[ns].lhs[I[ns].n+1]=NULL;
 I[ns].n++;
 }
 }
 }
}
void canonical(int l)
{
 int t1;
 char read1[15][10],rr1=0,*ptr1;
 for(i=0;i<I[l].n;i++)
 {
 temp2[0]='.';
 ptr1=strchr(I[l].rhs[i],'.');
 t1=ptr1-I[l].rhs[i];
 if( t1+1==strlen(I[l].rhs[i]) )
 continue;
 temp2[1]=I[l].rhs[i][t1+1];
 temp2[2]=NULL;
 for(j=0;j<rr1;j++)
 if( strcmp(temp2,read1[j])==0 )
 break;
 if(j==rr1)
 {
 strcpy(read1[rr1],temp2);
 read1[rr1][2]=NULL;
 rr1++;
 }
 else
 continue;
 for(j=0;j<I[0].n;j++)
 {
 ptr=strstr(I[l].rhs[j],temp2);
 if( ptr )
 {
 templ[tn]=I[l].lhs[j];
 templ[tn+1]=NULL;
 strcpy(tempr[tn],I[l].rhs[j]);
 tn++;
 }
 }
 for(j=0;j<tn;j++)
 {
 ptr=strchr(tempr[j],'.');
 p=ptr-tempr[j];
 tempr[j][p]=tempr[j][p+1];
 tempr[j][p+1]='.';
 I[ns].lhs[I[ns].n]=templ[j];
 I[ns].lhs[I[ns].n+1]=NULL;
 strcpy(I[ns].rhs[I[ns].n],tempr[j]);
 I[ns].n++;
 }
 moreprod();
 for(j=0;j<ns;j++)
 {
 //if ( memcmp(&I[ns],&I[j],sizeof(struct states))==1 )
 if( compstruct(I[ns],I[j])==1 )
 {
 I[ns].lhs[0]=NULL;
 for(k=0;k<I[ns].n;k++)
 I[ns].rhs[k][0]=NULL;
 I[ns].n=0;
 dfa[l][j]=temp2[1];
 break;
 }
 }
 if(j<ns)
 {
 tn=0;
 for(j=0;j<15;j++)
 {
 templ[j]=NULL;
 tempr[j][0]=NULL;
 }
 continue;
 }
 dfa[l][j]=temp2[1];
 printf("\n\nI%d :",ns);
 for(j=0;j<I[ns].n;j++)
 printf("\n\t%c -> %s",I[ns].lhs[j],I[ns].rhs[j]);
 getch();
 ns++;
 tn=0;
 for(j=0;j<15;j++)
 {
 templ[j]=NULL;
 tempr[j][0]=NULL;
 }
 }
}
void main()
{
 FILE *f;
 int l;
 clrscr();
 for(i=0;i<15;i++)
 {
 I[i].n=0;
 I[i].lhs[0]=NULL;
 I[i].rhs[0][0]=NULL;
 dfa[i][0]=NULL;
 }
 f=fopen("C:\Users\vigne\Desktop\tab6.txt","r");
 while(!feof(f))
 {
 fscanf(f,"%c",&gl[n]);
 fscanf(f,"%s\n",gr[n]);
 n++;
 }
 printf("THE GRAMMAR IS AS FOLLOWS\n");
 for(i=0;i<n;i++)
 printf("\t\t\t\t%c -> %s\n",gl[i],gr[i]);
 I[0].lhs[0]='Z';
 strcpy(I[0].rhs[0],".S");
 I[0].n++;
 l=0;
 for(i=0;i<n;i++)
 {
 temp=I[0].rhs[l][1];
 l++;
 for(j=0;j<rr;j++)
 if( temp==read[j][0] )
 break;
 if(j==rr)
 {
 read[rr][0]=temp;
 rr++;
 }
 else
 continue;
 for(j=0;j<n;j++)
 {
 if(gl[j]==temp)
 {
 I[0].rhs[I[0].n][0]='.';
 strcat(I[0].rhs[I[0].n],gr[j]);
 I[0].lhs[I[0].n]=gl[j];
 I[0].n++;
 }
 }
 }
 ns++;
 printf("\nI%d :\n",ns-1);
 for(i=0;i<I[0].n;i++)
 printf("\t%c -> %s\n",I[0].lhs[i],I[0].rhs[i]);
 for(l=0;l<ns;l++)
 canonical(l);
 printf("\n\n\t\tPRESS ANY KEY FOR DFA TABLE");
 getch();
 clrscr();
 printf("\t\t\tDFA TABLE IS AS FOLLOWS\n\n\n");
 for(i=0;i<ns;i++)
 {
 printf("I%d : ",i);
 for(j=0;j<ns;j++)
 if(dfa[i][j]!='\0')
 printf("'%c'->I%d | ",dfa[i][j],j);
 printf("\n\n\n");
 }
 printf("\n\n\n\t\tPRESS ANY KEY TO EXIT");
 getch();
}
